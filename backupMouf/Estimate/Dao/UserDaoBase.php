<?php
/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserDao class instead!
 */
namespace Estimate\Dao;

use Mouf\Database\DAOInterface;
use Mouf\Database\TDBM\TDBMService; 
use Mouf\Database\TDBM\Filters\OrderByColumn;
use Estimate\Dao\Bean\UserBean;

/**
 * The UserDaoBase class will maintain the persistance of UserBean class into the users table.
 * 
 */
class UserDaoBase implements DAOInterface
{

	/**
	 * @var TDBMService
	 */
	protected $tdbmService;
	
	/**
	 * The default Sort column
	 * @var string
	 */
	private $defaultSort = null;
	
	/**
	 * The default Sort direction
	 * @var string
	 */
	private $defaultDirection = 'asc';
	
	/**
	 * Sets the TDBM service used by this DAO.
	 *
	 * @Property
	 * @Compulsory
	 * @param TDBMService $tdbmService
	 */
	public function setTdbmService(TDBMService $tdbmService) {
		$this->tdbmService = $tdbmService;
	}

	/**
	 * Return a new instance of UserBean object, that will be persisted in database.
	 *
	 * @return UserBean
	 */
	public function create() {
		return $this->tdbmService->getNewObject('users', true, 'Estimate\Dao\Bean\UserBean');
	}
	
	/**
	 * Persist the UserBean instance
	 *
	 */
	public function save($obj) {
		$obj->save();
	}

	/**
	 * Get all User records. 
	 *
	 * @return array<UserBean>
	 */
	public function getList() {
		if ($this->defaultSort){
			$orderBy = new OrderByColumn('users', $this->defaultSort, $this->defaultDirection);
		}else{
			$orderBy = null;
		}
		return $this->tdbmService->getObjects('users',  null, $orderBy, null, null, 'Estimate\Dao\Bean\UserBean');
	}
	
	/**
	 * Get UserBean specified by its ID (its primary key)
	 * If the primary key does not exist, an exception is thrown.
	 *
	 * @param string $id
	 * @param boolean $lazyLoading If set to true, the object will not be loaded right away. Instead, it will be loaded when you first try to access a method of the object.
	 * @return UserBean
	 * @throws TDBMException
	 */
	public function getById($id, $lazyLoading = false) {
		return $this->tdbmService->getObject('users', $id, 'Estimate\Dao\Bean\UserBean', $lazyLoading);
	}
	
	/**
	 * Deletes the UserBean passed in parameter.
	 *
	 * @param UserBean $obj
	 */
	public function delete($obj) {
		$this->tdbmService->deleteObject($obj);
	}
	
	/**
	 * Get a list of UserBean specified by its filters.
	 *
	 * @param mixed $filterBag The filter bag (see TDBMService::getObjects for complete description)
	 * @param mixed $orderbyBag The order bag (see TDBMService::getObjects for complete description)
	 * @param integer $from The offset
	 * @param integer $limit The maximum number of rows returned
	 * @return array<UserBean>
	 */
	protected function getListByFilter($filterBag=null, $orderbyBag=null, $from=null, $limit=null) {
		if ($this->defaultSort && $orderbyBag == null){
			$orderbyBag = new OrderByColumn('users', $this->defaultSort, $this->defaultDirection);
		}
		return $this->tdbmService->getObjects('users', $filterBag, $orderbyBag, $from, $limit, 'Estimate\Dao\Bean\UserBean');
	}

	/**
	 * Get a single UserBean specified by its filters.
	 *
	 * @param mixed $filterBag The filter bag (see TDBMService::getObjects for complete description)
	 * @return UserBean
	 */
	protected function getByFilter($filterBag=null) {
		return $this->tdbmService->getObject('users', $filterBag, 'Estimate\Dao\Bean\UserBean');
	}
	
	/**
	 * Sets the default column for default sorting
	 *
	 */
	public function setDefaultSort($defaultSort){
		$this->defaultSort = $defaultSort;
	}

}
?>