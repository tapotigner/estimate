<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */
namespace Estimate\Dao;
use Mouf\Security\UserService\UserDaoInterface;
use Mouf\Security\UserService\UserInterface;
use Mouf\Security\UserService\UserServiceInterface;
use Mouf\Database\TDBM\Filters\EqualFilter;
use Mouf\Security\UserService\AuthenticationListenerInterface;

/**
 * The UserDao class will maintain the persistance of UserBean class into the users table.
 *
 * @Component
 * @dbTable users
 */
class UserDao extends UserDaoBase implements  UserDaoInterface, AuthenticationListenerInterface {

    /**
     * Returns a user from its login and its password, or null if the login or credentials are false.
     *
     * @param string $login
     * @param string $password
     * @return UserInterface
     */
    public function getUserByCredentials($login, $password) {
        return $this->getByFilter(
            array(
                new EqualFilter("users", "login", $login),
                new EqualFilter("users", "password", sha1($password)),
                // TODO new EqualFilter("user", "status_id", self::STATUS_ACTIVE)
            )
        );
    }

    /**
     * Returns a user from its token.
     *
     * @param string $token
     * @return UserInterface
     */
    public function getUserByToken($token) {
        return $this->getByFilter(new EqualFilter('users', 'token', $token));
    }

    /**
     * Discards a token.
     *
     * @param string $token
     */
    public function discardToken($token) {
        $user = $this->getUserByToken($token);
        $user->setToken(null);
        $user->save();
    }

    /**
     * Returns a user from its ID
     *
     * @param string $id
     * @return UserInterface
     */
    public function getUserById($id) {
        return $this->getByFilter(new EqualFilter('users', 'id', $id));
    }

    /**
     * Returns a user from its login
     *
     * @param string $login
     * @return UserInterface
     */
    public function getUserByLogin($login) {
        return $this->getByFilter(new EqualFilter('users', 'login', $login));
    }

    /**
     * This method is called just after a log-in occurs.
     *
     * @param UserServiceInterface $userService The service that performed the log-in
     */
    public function afterLogIn(UserServiceInterface $userService) {
    }

    /**
     * This method is called just before the current user logs out.
     *
     * @param UserServiceInterface $userService The service that performed the log-out
     */
    public function beforeLogOut(UserServiceInterface $userService) {
    }
}